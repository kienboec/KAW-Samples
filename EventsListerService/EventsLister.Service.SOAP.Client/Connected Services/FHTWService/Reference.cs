//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//
//     Änderungen an dieser Datei können fehlerhaftes Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FHTWService
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FHTWEvent", Namespace="http://schemas.datacontract.org/2004/07/EventsLister.Service.SOAP")]
    public partial class FHTWEvent : object
    {
        
        private string DateField;
        
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Date
        {
            get
            {
                return this.DateField;
            }
            set
            {
                this.DateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FHTWService.IFHTWService")]
    public interface IFHTWService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFHTWService/HasData", ReplyAction="http://tempuri.org/IFHTWService/HasDataResponse")]
        System.Threading.Tasks.Task<FHTWService.HasDataResponse> HasDataAsync(FHTWService.HasDataRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFHTWService/GetAllEvents", ReplyAction="http://tempuri.org/IFHTWService/GetAllEventsResponse")]
        System.Threading.Tasks.Task<FHTWService.GetAllEventsResponse> GetAllEventsAsync(FHTWService.GetAllEventsRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="HasData", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class HasDataRequest
    {
        
        public HasDataRequest()
        {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="HasDataResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class HasDataResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool HasDataResult;
        
        public HasDataResponse()
        {
        }
        
        public HasDataResponse(bool HasDataResult)
        {
            this.HasDataResult = HasDataResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAllEvents", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetAllEventsRequest
    {
        
        public GetAllEventsRequest()
        {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAllEventsResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetAllEventsResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.Collections.Generic.List<FHTWService.FHTWEvent> GetAllEventsResult;
        
        public GetAllEventsResponse()
        {
        }
        
        public GetAllEventsResponse(System.Collections.Generic.List<FHTWService.FHTWEvent> GetAllEventsResult)
        {
            this.GetAllEventsResult = GetAllEventsResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface IFHTWServiceChannel : FHTWService.IFHTWService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class FHTWServiceClient : System.ServiceModel.ClientBase<FHTWService.IFHTWService>, FHTWService.IFHTWService
    {
        
        /// <summary>
        /// Implementieren Sie diese partielle Methode, um den Dienstendpunkt zu konfigurieren.
        /// </summary>
        /// <param name="serviceEndpoint">Der zu konfigurierende Endpunkt</param>
        /// <param name="clientCredentials">Die Clientanmeldeinformationen</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public FHTWServiceClient() : 
                base(FHTWServiceClient.GetDefaultBinding(), FHTWServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public FHTWServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(FHTWServiceClient.GetBindingForEndpoint(endpointConfiguration), FHTWServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public FHTWServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(FHTWServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public FHTWServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(FHTWServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public FHTWServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<FHTWService.HasDataResponse> HasDataAsync(FHTWService.HasDataRequest request)
        {
            return base.Channel.HasDataAsync(request);
        }
        
        public System.Threading.Tasks.Task<FHTWService.GetAllEventsResponse> GetAllEventsAsync(FHTWService.GetAllEventsRequest request)
        {
            return base.Channel.GetAllEventsAsync(request);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Es wurde kein Endpunkt mit dem Namen \"{0}\" gefunden.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding))
            {
                return new System.ServiceModel.EndpointAddress("https://localhost:44313/Service.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Es wurde kein Endpunkt mit dem Namen \"{0}\" gefunden.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return FHTWServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return FHTWServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding,
        }
    }
}
